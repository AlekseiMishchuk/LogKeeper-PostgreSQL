@using LogKeeperPg.Models
@using LogKeeperPg.Services
@using LogKeeperPg.Settings

@inject GetLogService GetLogService
@inject NavigationManager NavigationManager
@inject PaginationSettings Variables


@if (_currentPageLogs != null)
{
    <div class="vstack gap-2" style="padding-top: 10px; padding-bottom: 10px">
        @foreach (var log in _currentPageLogs)
        {
            <div class="log-preview-block" 
                 role ="button"
                 data-bs-toggle="modal"
                 data-bs-target="@GetLogModalId(log)">
                <div><h5>@log.Title</h5></div>
                <div>@log.Time</div>
            </div>
            <LogModal Log="@log"/>
        }
    </div>
    
    @if (_totalLogsCount > Variables.ElementsPerPage)
    {
        <Pagination ParentTaskCompletion="@_parentTaskCompletion"/>
    }
}
else
{
<div class="d-flex align-items-center" style="display: flex; justify-content: center; align-items: center; height: 50vh;">
        <strong role="status" style="margin-right: 10px">Loading...</strong>
        <div class="spinner-border" aria-hidden="true"></div>
</div>
}



@code {
    [CascadingParameter] 
    public int CurrentPage { get; set; }

    private TaskCompletionSource<bool> _parentTaskCompletion = new();
    private List<LogInformation>? _currentPageLogs;
    private int _totalLogsCount;

    protected override async Task OnInitializedAsync()
    {
        _totalLogsCount = await GetLogService.GetLogsCountAsync();
        _currentPageLogs = await GetLogService.GetLogsByPageAsync(1);
    }

    protected override async Task OnParametersSetAsync()
    {
        CurrentPage = Math.Max(1, CurrentPage);
        _currentPageLogs = await GetLogService.GetLogsByPageAsync(CurrentPage);
        _parentTaskCompletion.SetResult(true);
    }

    private string GetLogModalId(LogInformation? log) => $"#{LogModal.GetLogModalId(log)}";
}